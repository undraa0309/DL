# -*- coding: utf-8 -*-
"""dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AjoU0XBAlHdYM43peZVaHeuwY5F3QzQj
"""

from google.colab import drive
drive.mount('/content/drive')

import tarfile
import os

# Define the paths for the tar files and the directory to extract them
train_tar_path = '/content/drive/MyDrive/mnist-classification/data/train.tar'
test_tar_path = '/content/drive/MyDrive/mnist-classification/data/test.tar'
train_dir = '/mnt/data/train'
test_dir = '/mnt/data/test'

# Create directories to extract the files
os.makedirs(train_dir, exist_ok=True)
os.makedirs(test_dir, exist_ok=True)

# Function to extract tar files
def extract_tar(tar_path, extract_path):
    with tarfile.open(tar_path, 'r') as tar:
        tar.extractall(path=extract_path)

# Extract the tar files
extract_tar(train_tar_path, train_dir)
extract_tar(test_tar_path, test_dir)

# List the first few files in each directory
train_files = os.listdir(train_dir)[:10]
test_files = os.listdir(test_dir)[:10]

train_files, test_files

train_dir_corrected = os.path.join(train_dir, 'train')
test_dir_corrected = os.path.join(test_dir, 'test')

train_files_corrected = os.listdir(train_dir_corrected)[:10]
test_files_corrected = os.listdir(test_dir_corrected)[:10]

train_files_corrected, test_files_corrected

import os
import torch
from torch.utils.data import Dataset
from torchvision import transforms
from PIL import Image

class MNIST(Dataset):
    """ MNIST dataset

        각 이미지 파일은 다음과 같은 형식으로 되어 있습니다:
            {ID}_{Label}.png

    Args:
        data_dir (str): 이미지 파일들이 있는 디렉토리 경로

    Note:
        1) 이미지는 [0, 1] 범위로 스케일링하고 평균 0.1307, 표준편차 0.3081로 정규화합니다.
        2) torchvision.transforms를 사용하여 전처리를 구현합니다.
    """

    def __init__(self, data_dir):
        self.data_dir = data_dir
        self.file_names = os.listdir(data_dir)
        self.transform = transforms.Compose([
            transforms.ToTensor(),
            transforms.Normalize((0.1307,), (0.3081,))
        ])

    def __len__(self):
        return len(self.file_names)

    def __getitem__(self, idx):
        file_name = self.file_names[idx]
        img = Image.open(os.path.join(self.data_dir, file_name))
        img = self.transform(img)
        label = int(file_name.split('_')[1].split('.')[0])
        return img, label

if __name__ == '__main__':
    # 트레이닝 데이터셋 경로를 올바르게 지정
    train_dataset_path = '/mnt/data/train/train'
    dataset = MNIST(train_dataset_path)
    print(f"데이터셋 크기: {len(dataset)}")
    img, label = dataset[0]
    print(f"첫 번째 이미지의 크기: {img.shape}, 레이블: {label}")